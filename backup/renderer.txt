/****************************************************************
*                        --- Desc ---                           * 
*                                                               *
*   A layer for rendering the entire graphical part of the game *
*                                                               *
*****************************************************************/

#include "../include/engine/Layers/RenderLayer.h"

RenderLayer::RenderLayer() : Layer("RenderLayer"), m_CameraController(16.0f / 9.0f)
{
    Logger::GetInstance().Info(CATEGORY, "RenderLayer Created");
}

static std::vector<Vertex> CreateQuad(float x, float y, GLuint texID){
    
    float size = 1.0f;
    std::vector<Vertex> res;

    Vertex v0;
    v0.position = {-0.8f, -1.37f, 0.0f};
    v0.texCoords = {0.0f, 0.0f};
    v0.color = {0.18f, 0.6f, 0.96f, 1.0f};
    v0.texID = texID;
    res.push_back(v0);

    Vertex v1;
    v1.position = { -1.56f, -0.53f, 0.0f };
    v1.texCoords = { 1.0f, 0.0f };
    v1.color = {0.18f, 0.6f, 0.96f, 1.0f};
    v1.texID = texID;
    res.push_back(v1);

    Vertex v2;
    v2.position = { -1.18f, 0.29f, 0.0f };
    v2.texCoords = { 1.0f, 1.0f };
    v2.color = {0.18f, 0.6f, 0.96f, 1.0f};
    v2.texID = texID;
    res.push_back(v2);

    Vertex v3;
    v3.position = { -0.13f, -0.49f, 0.0f };
    v3.texCoords = { 0.0f, 1.0f };
    v3.color = {0.18f, 0.6f, 0.96f, 1.0f};
    v3.texID = texID;
    res.push_back(v3);

    Vertex v4;
    v4.position = { -0.09f, -0.99f, 0.0f };
    v4.texCoords = { 0.0f, 1.0f };
    v4.color = {0.18f, 0.6f, 0.96f, 1.0f};
    v4.texID = texID;
    res.push_back(v4);

    return res;
}

void RenderLayer::OnAttach()
{
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    m_Shader = Shader::FromGLSLTextFile("/FileSystem/Shaders/vertex.glsl", "/FileSystem/Shaders/fragment.glsl", {"ben", "slon"});
    m_Material = Material::CreateMaterial("mat1", m_Shader, {0.18f, 0.6f, 0.96f, 1.0f});
    m_Mesh = Mesh::CreateMesh("obj", CreateQuad(1, 1, 0.0f), {0, 1, 2, 0, 2, 3, 0, 3, 4}, m_Material);
    m_MeshesArr.push_back(m_Mesh);
    glGenVertexArrays(1, &m_QuadVA);
    glBindVertexArray(m_QuadVA);

    glGenBuffers(1, &m_QuadVB);
    glBindBuffer(GL_ARRAY_BUFFER, m_QuadVB);
    glBufferData(GL_ARRAY_BUFFER, sizeof(Vertex) * 1000, nullptr, GL_DYNAMIC_DRAW);

    glGenBuffers(1, &m_QuadUBO);
    glBindBuffer(GL_UNIFORM_BUFFER, m_QuadUBO);
    glBufferData(GL_UNIFORM_BUFFER, 128 * sizeof(glm::mat4), nullptr, GL_DYNAMIC_DRAW); // 128 - максимальное количество объектов
    glBindBuffer(GL_UNIFORM_BUFFER, 0);

    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const void*)offsetof(Vertex, position));

    glEnableVertexAttribArray(1);
    glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const void*)offsetof(Vertex, color));

    glEnableVertexAttribArray(2);
    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const void*)offsetof(Vertex, texCoords));

    glEnableVertexAttribArray(3);
    glVertexAttribPointer(3, 1, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const void*)offsetof(Vertex, texID));

    glEnableVertexAttribArray(4);
    glVertexAttribPointer(4, 1, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const void*)offsetof(Vertex, objID));

    uint32_t indices[] = { 
        0, 1, 2, 0, 2, 3, 0, 3, 4
     };
    glGenBuffers(1, &m_QuadIB);

    Logger::GetInstance().Info(CATEGORY, "RenderLayer Attached");
}

void RenderLayer::OnDetach()
{
    glDeleteVertexArrays(1, &m_QuadVA);
    glDeleteBuffers(1, &m_QuadVB);
    glDeleteBuffers(1, &m_QuadIB);

    Logger::GetInstance().Info(CATEGORY, "RenderLayer Detached");
}

void RenderLayer::OnUpdate(Timestep ts)
{
    m_CameraController.OnUpdate(ts);
    PackIntoBatches(m_MeshesArr);
    for (auto batch : m_Batches){

        glBindBuffer(GL_ARRAY_BUFFER, m_QuadVB);
        glBufferSubData(GL_ARRAY_BUFFER, 0, batch->vertices.size() * sizeof(Vertex), batch->vertices.data());

        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, m_QuadIB);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, batch->indices.size() * sizeof(uint32_t), batch->indices.data(), GL_STATIC_DRAW);

        glBindBuffer(GL_UNIFORM_BUFFER, m_QuadUBO);
        glBufferSubData(GL_UNIFORM_BUFFER, 0, batch->modelMatrices.size() * sizeof(glm::mat4), batch->modelMatrices.data());
        glBindBuffer(GL_UNIFORM_BUFFER, 0);

        glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        GLuint shaderProgramID = batch->shader->GetRendererID();

        // Привязка UBO к шейдеру
        GLuint blockIndex = glGetUniformBlockIndex(shaderProgramID, "ModelMatrices");
        if (blockIndex == GL_INVALID_INDEX) {
            Logger::GetInstance().Error(CATEGORY, "Uniform block 'ModelMatrices' not found in shader.");
            continue;
        }
        glUniformBlockBinding(shaderProgramID, blockIndex, 0); // Привязка к индексу 0
        glBindBufferBase(GL_UNIFORM_BUFFER, 0, m_QuadUBO);

        glUseProgram(batch->shader->GetRendererID());

        auto vp = m_CameraController.GetCamera().GetViewProjectionMatrix();

        SetUniformMat4(batch->shader->GetRendererID(), "u_ViewProjection", vp);
        SetUniformMat4(batch->shader->GetRendererID(), "u_Model", glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f)));

        glBindVertexArray(m_QuadVA);
        glDrawElements(GL_TRIANGLES, 9, GL_UNSIGNED_INT, nullptr);
    }
}

void RenderLayer::OnImGuiRender()
{
    ImGui::Begin("Render Debug Menu");
    if(ImGui::ColorEdit4("Square Base Color", glm::value_ptr(m_SquareBaseColor))){
        m_SquareColor = m_SquareBaseColor;
    }
    ImGui::ColorEdit4("Square Alternative Color", glm::value_ptr(m_SquareAlternativeColor));

    ImGui::Text("%.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);

    ImGui::End();
}

void RenderLayer::SetUniformMat4(uint32_t shader, const char* name, const glm::mat4& matrix) {
    int location = glGetUniformLocation(shader, name);
    glUniformMatrix4fv(location, 1, GL_FALSE, glm::value_ptr(matrix));
}

void RenderLayer::SetUniform4fv(uint32_t shader, const char* name, const glm::vec4& vect){
    int location = glGetUniformLocation(shader, name);
    glUniform4fv(location, 1, glm::value_ptr(vect));
}

std::shared_ptr<Batch> RenderLayer::MakeBatch(std::vector<std::shared_ptr<Mesh>> meshes){
    std::shared_ptr<Batch> batch(new Batch());
    int objID = 0;
    for (const auto& mesh : meshes){
        batch->modelMatrices.push_back(mesh->GetMeshMatrix());
        
        for (const auto& vertex : mesh->GetVertices()){
            Vertex batchedVertex = vertex;
            batchedVertex.objID = objID;
            batch->vertices.push_back(batchedVertex);
        }

        size_t offset = batch->vertices.size();
        for (const auto& index : mesh->GetIndices()){
            batch->indices.push_back(index + offset);
        }

        batch->shader = mesh->GetMaterial()->GetShader();
        ++objID;
    }

    return batch;
}
void RenderLayer::PackIntoBatches(std::vector<std::shared_ptr<Mesh>> meshes)
{
    m_Batches.clear();
    std::unordered_map<std::shared_ptr<Shader>, std::vector<std::shared_ptr<Mesh>>> meshesByShaders;

    for (const auto& mesh : meshes){
        meshesByShaders[mesh->GetMaterial()->GetShader()].push_back(mesh);
    } 

    for (const auto& sortedMehes : meshesByShaders){
        m_Batches.push_back(MakeBatch(sortedMehes.second));
    }
}