#include <emscripten/emscripten.h>
#include <emscripten/html5.h>
#include <GLES2/gl2.h>
#include <EGL/egl.h>
#include <string>
#include <fstream>
#include <sstream>
#include <iostream>
#include <vector>
#include <cstdio>

// Подключаем GLFW
#include <GLFW/glfw3.h>

// Подключаем ImGui
#include "../Imgui/imgui.h"
#include "../Imgui/backends/imgui_impl_glfw.h"
#include "../Imgui/backends/imgui_impl_opengl3.h"

// Ваши заголовочные файлы
#include "../include/engine/Graphics/renderer.h"
#include "../include/engine/Entities/gameObject.h"
#include "../include/engine/Entities/material.h"
#include "../include/engine/Tools/fileLoader.h"
#include "../include/engine/Entities/scene.h"
#include "../include/engine/Inputs/inputManager.h"
#include "../include/engine/Entities/Actors/dynamicActor.h"
#include "../include/engine/Tools/xmlReader.h"
#include "../include/engine/Factories/materialFactory.h"
#include "../include/engine/Entities/Colliders/collisionBox.h"
#include "../include/engine/Entities/camera.h"
#include "../include/engine/Factories/gameObjectFactory.h"
#include "../include/engine/Factories/sceneFactory.h"
#include "../include/engine/Managers/collisionsManager.h"
#include "../include/engine/Managers/scriptsManager.h"
#include "../WrenVM/include/wren.hpp"

#include "../include/engine/Core/ArtCore.h"
#include "../include/engine/Graphics/render.h"
#include "../include/engine/Core/Application.h"

Scene* scene;
SceneFactory* sceneFactory;
CollisionManager* collisionManager;
WrenConfiguration config;
WrenVM* vm;
WrenHandle* gameEngineClass;
WrenHandle* engineInstanceHandle;
LayerStack layerStack;
Render* renderLayer;
Timestep timestep;
float lastTime;

Application* app;

// Инициализация ImGui
void initImGui(GLFWwindow* window) {
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGui::StyleColorsDark();

    // Инициализация ImGui для GLFW
    ImGui_ImplGlfw_InitForOpenGL(window, true);
    ImGui_ImplOpenGL3_Init("#version 100");
}

void renderImGui() {
    // Новый кадр для ImGui
    ImGui_ImplOpenGL3_NewFrame();
    ImGui_ImplGlfw_NewFrame();
    ImGui::NewFrame();

    // Простой интерфейс для отладки
    ImGui::Begin("Hello, ImGui!");
    ImGui::Text("This is a simple ImGui window.");
    ImGui::End();

    // Отображаем все окна ImGui
    ImGui::Render();
    glClearColor(0.45f, 0.55f, 0.60f, 1.00f); // Цвет фона
    glClear(GL_COLOR_BUFFER_BIT);
    ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
}

void main_loop() {

}

int main() {
    /*
    if (!glfwInit()) {
        std::cerr << "Failed to initialize GLFW" << std::endl;
        return -1;
    }

    // Настройка контекста OpenGL для использования с Emscripten
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);  // Для GLES2

    // Создание окна
    GLFWwindow* window = glfwCreateWindow(1280, 720, "My Game Engine", nullptr, nullptr);
    if (window == nullptr) {
        std::cerr << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }

    // Создание контекста OpenGL
    glfwMakeContextCurrent(window);
    glfwSwapInterval(1); // Включение вертикальной синхронизации

    // Инициализация ImGui
    initImGui(window);

    // Инициализация рендерера и сцены
    initRenderer(*scene);
    */
    //renderLayer = new Render();
    //layerStack.PushLayer(renderLayer);
    //lastTime = emscripten_get_now();
    // Основной цикл игры с Emscripten
    //emscripten_set_main_loop(main_loop, 0, 1);

    // Очистка
    //glfwDestroyWindow(window);
    //glfwTerminate();

    app = new Application();
    app->Run();

    //delete scene;
    return 0;
}
